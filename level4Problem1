"""PROBLEM:

Distract the Guards
-------------------

The time for the mass escape has come, and you need to distract the guards so that the bunny prisoners can make it out! Unfortunately
for you, they're watching the bunnies closely. Fortunately, this means they haven't realized yet that the space station is about to
explode due to the destruction of the LAMBCHOP doomsday device. Also fortunatley, all that time you spent working as first a minion and
then a henchman means that you know the guards are fond of banans. And gambling. And thumb wrestling.

The guards, being board, readily accept your suggestion to play the Banana Games.

You will set up simultaneous thumb wrestling matches. In each match, two guards will pair off to thumb wrestle. The guard with fewer
bananas will bet all their bananas, and the other guard will match the bet. The winner will receive all the bet bananas. You don't 
pair off guards with the same number of bananas (you will see why, shortly). You know enough guard psychology to know that the one who
has more bananas always gets over-confident and loses. Once a match begins, the pair of guards will continue to thumb wrestle and
exchange bananas, until both of them have the same number of bananas. Once that happens, both of them will lose interest and go back to
guarding the prisoners, and you don't want THAT to happen!

For example, if the two guards that were paired started with 3 and 5 bananas, after the first round of thumb wrestling they will have 6 
and 2 (the one with 3 bananas wins and gets 3 bananas from the loser). After the second round, they will have 4 and 4 (the one with 6 
bananas loses 2 bananas). At that point they stop and get back to guarding.

How is all this useful to distract the guards? Notice that if the guards had started with 1 and 4 bananas, then they keep thumb
wrestling! 1, 4 -> 2, 3 -> 4, 1 -> 3, 2 -> 1, 4 and so on.

Now your plan is clear. You must pair up the guards in such a way that the maximum number of guards go into an infinite thumb wrestling 
loop!

Write a function answer(banana_list) which, given a list of positive integers depicting the amount of bananas the each guard starts with,
returns the fewest possible number of guards that will be left to watch the prisoners. Element i of the list will be the number of 
bananas that guard i (counting from 0) starts with.

The number of guards will be at least 1 and not more than 100, and the number of bananas each guard starts with will be a positive 
integer no more than 1073741823 (i.e. 2^30 -1). Some of them stockpile a LOT of bananas."""    

#SOLUTION
"""This problem can be divided into two sub-problems.
   1. How do we know if two amounts of bananas (num1, num2) will cause the guards to play thumb wrestling forever?
   2. Once we know the how all possible matches in the banana list lead to infinite loops or not, how do pair the numbers in 
      the banana list so that there will be as many infinite loops as possible?
      
   The first problem can be solved in the following way:
   a) Calculate the sum of the two banana amounts. No matter the outcome of each thumb wrestling match, the sum of the 
      two banana amounts will stay the same.
   b) Find the largest power of 2 the sum can be divided by to get a whole, odd number n. Divide the sum by this power of 2.
   c) If the banana amounts are divisible by n, they will lead to a non-infinite numbers of matches.
   
   We can construct a matrix that contains the results (whether or not the pair will lead to infinite matches) for all possible
   pairs of banana amounts in the list. This matrix is a bipartite graph, and so a maximum bipartite matching algorithm 
   (http://wiki.dreamrunner.org/public_html/Algorithms/Algorithms/Graph.html) can be used to find the maximum number of pairs
   that will lead to an infinite number of matches.
   
   In retrospect, an object-oriented solution to this problem would've been more efficient than the way I have solved it here,
   since the length of the banana list and bipartite graph (which might be large) have to be passed to the helper functions."""

def bipartiteMatching(lengthOfList, u, matchList, visited, loopMatrix):
    """For a banana amount u, check all the other banana amounts that lead to infinite matches. If the program finds one that
    has not already been 'assigned' to another u, assign it to u and return true. If the banana amount has already been assigned
    to another banana amount x, check if x can be assigned to another banana amount, assign it to that aother amount if possible,
    and then assigned u to the now-freed-up banana amount."""
    
    for v in range(lengthOfList):
        if loopMatrix[u][v] and visited[v] == False:
            visited[v] = True
 
            if matchList[v] == -1 or bipartiteMatching(lengthOfList, matchList[v], matchList, visited, loopMatrix):
                matchList[v] = u
                return True
    return False

def findMaximumPairs(lengthOfList, loopMatrix):
    """Use bipartiteMatching() to find the maximum number of pairs of banana amounts that will lead to infinite matches."""
    matchList = [-1] * lengthOfList
    count = 0
    for i in range(lengthOfList):
        visited = [False] * lengthOfList
        if bipartiteMatching(lengthOfList, i, matchList, visited, loopMatrix):
            count += 1
    return lengthOfList - 2*(count//2)

def answer(bananaList):
    listLength = len(bananaList)
    
    """Initialize and populate loopMatrix, which stores the results of every banana amount pairing. For example, the element
    in row 0, column 1 of loopMatrix contains either a 0 or a 1, 0 if the 0th and 1st elements of the banana list lead to 
    a non-infinite number of matches, 1 if they lead to an infinite number of matches. Note that the matrix is symmetric.
    (1st element of banana list, 5th element of banana list) will have the same results as (5th element of banana list, 1st
    element of banana list). Also note that the elements along the diagonal of the matrix are 0 (they lead to a finite number
    of matches). (2nd element of list, 2nd element of list) will be two numbers that are necessarily equal, and so the two
    guards would not even compete in one wrestling match."""
    
    loopMatrix = list([0]*listLength for i in range(listLength))
    #loop through every element of loopMatrix
    for rowIndex in range(listLength):
        for columnIndex in range(listLength):
            #we only need to calculate the results for the elements below the diagonal because the matrix is symmetric
            if rowIndex < columnIndex:
                #figure out if the pair of numbers will lead to an infinite number of matches
                number1 = bananaList[rowIndex]
                number2 = bananaList[columnIndex]
                summ = number1 + number2
                divideByTwo = summ
                while divideByTwo % 2 == 0:
                    divideByTwo = divideByTwo / 2
                if (number1 % divideByTwo) == 0:
                    loopMatrix[rowIndex][columnIndex] = 0
                else:
                    loopMatrix[rowIndex][columnIndex] = 1
                #set the location's corresponding location above the diagonal to the same result
                loopMatrix[columnIndex][rowIndex] = loopMatrix[rowIndex][columnIndex]
    #after loopMatrix has been populated, call the findMaximumPairs function and return the result
    result = findMaximumPairs(listLength, loopMatrix)
    return result
